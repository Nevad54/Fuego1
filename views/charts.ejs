<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Charts for Temperature and Humidity</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.1.0/mqtt.min.js"></script>
  <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
  <link rel="stylesheet" href="/chart.css">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Sharp" rel="stylesheet">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
</head>
<body>
    <div class="container">
        <!-- Sidebar Section -->
        <aside>
            <div class="toggle">
                <div class="logo">
                    <img src="../images/logo.png">
                    <h2>BFP <span class="danger">Batac-City</span></h2>
                </div>
                <div class="close" id="close-btn">
                    <span class="material-icons-sharp">
                        close
                    </span>
                </div>
            </div>

            <div class="sidebar">
              <a href="/adminHome" >
                  <span class="material-icons-sharp">
                      dashboard
                  </span>
                  <h3>Dashboard</h3>
              </a>
             
              <a href="/charts" class="active" >
                  <span class="material-icons-sharp">
                      insights
                  </span>
                  <h3>Charts</h3>
              </a>
              <a href="/alert" >
                  <span class="material-symbols-outlined">
                      notifications
                  </span>
                  <h3>Alerts</h3>
                 
              </a>
              <a href="/database">
                  <span class="material-symbols-outlined">
                      database
                  </span>
                  <h3>Database</h3>
              </a>
                       
                    <a href="/user">
                        <span class="material-symbols-outlined">
                            manage_accounts
                        </span>
                        <h3>User</h3>
                    </a>
                
              <a href="/location">
                  <span class="material-icons-sharp">pin_drop</span>
                  <h3>Maps</h3>
              </a>
              <a href="/userList">
                <span class="material-symbols-outlined"> admin_panel_settings </span>
                <h3>Admin Panel</h3>
            </a>
              
              <a href="/AboutUs">
                  <span class="material-symbols-outlined">
                      help
                  </span>
                  <h3>About Us</h3>
              </a>
              <a href="/logout">
                  <span class="material-icons-sharp">
                      logout
                  </span>
                  <h3>Logout</h3>
              </a>
          </div>
        </aside>
        <!-- End of Sidebar Section -->

        <!-- Main Section -->
        <main>
            <h1>Dynamic Temperature, Humidity, and Smoke Charts</h1>
            <div id="chartsContainer" style="display: flex; flex-direction: column; align-items: center;">
                <!-- Charts will be dynamically added here -->
            </div>

            <script>
                const socket = io.connect('https://fuego1.onrender.com');
                let charts = {}; // Object to store created charts
            
                // Function to create a new chart
                function createChart(containerId, label) {
                    const canvas = document.createElement('canvas');
                    canvas.width = 700;
                    canvas.height = 400;
                    document.getElementById(containerId).appendChild(canvas);
                    const ctx = canvas.getContext('2d');
            
                    return new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: [],
                            datasets: [{
                                label: label + ' Temperature (Â°C)',
                                borderColor: 'rgb(255, 99, 132)',
                                data: [],
                                fill: false,
                            }, {
                                label: label + ' Humidity (%)',
                                borderColor: 'rgb(75, 192, 192)',
                                data: [],
                                fill: false,
                            }, {
                                label: label + ' Smoke (%)',
                                borderColor: 'rgb(210, 92, 192)',
                                data: [],
                                fill: false,
                            }],
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: {
                                    type: 'category',
                                    labels: [],
                                },
                                y: {
                                    beginAtZero: true,
                                },
                            },
                        },
                    });
                }
            
                // Function to update chart data
                function updateChartData(chart, data, label) {
                    try {
                        const timestamp = new Date().toLocaleTimeString();
                        const numericValue = parseFloat(data);
            
                        chart.data.labels.push(timestamp);
            
                        if (label.startsWith('Temp')) {
                            chart.data.datasets[0].data.push(numericValue);
                        } else if (label.startsWith('Humid')) {
                            chart.data.datasets[1].data.push(numericValue);
                        } else if (label.startsWith('Smoke')) {
                            chart.data.datasets[2].data.push(numericValue);
                        }
            
                        chart.options.scales.x.labels.push(timestamp); // Update x-axis labels
            
                        chart.update();
                        console.log('Chart (${label}) updated successfully:', chart.data);
                    } catch (error) {
                        console.error('Error updating chart (${label}) data:', error);
                    }
                }
            
                document.addEventListener('DOMContentLoaded', () => {
                    console.log('DOM content loaded');
            
                    // Listening for MQTT messages
                    socket.on('mqttMessage', (payload) => {
                        console.log('Received mqttMessage:', payload);
                        const topic = payload.topic;
                        const index = extractIndexFromTopic(topic) + 1; // Increment index by 1
                                
                        // Check if chart exists for this topic, if not create a new chart
                        if (!charts.hasOwnProperty(index)) {
                            const containerId = 'chartContainer_' + index;
                            const newContainer = document.createElement('div');
                            newContainer.id = containerId;
                            newContainer.className = 'chart-container';
                            document.getElementById('chartsContainer').appendChild(newContainer);
                            charts[index] = createChart(containerId, 'FDAS-' + index); // Use 'FDAS-' + index as label
                    
                        }
            
                        // Update chart data based on the received MQTT message
                        updateChartData(charts[index], payload.message, topic);
                    });
                });
            
                // Function to extract index from topic name
                function extractIndexFromTopic(topic) {
                    const match = topic.match(/\d+$/); // Match one or more digits at the end of the topic
                    if (match) {
                        return parseInt(match[0]); // Parse the matched digits as an integer
                    }
                    return NaN; // Return NaN if no digits found at the end of the topic
                }
            </script>
        </main>
        <!-- End of Main Content -->

        <!-- Right Section -->
        <div class="right-section">
            <div class="nav">
                <button id="menu-btn">
                    <span class="material-icons-sharp">
                        menu
                    </span>
                </button>
                <div class="dark-mode">
                    <span class="material-icons-sharp active">
                        light_mode
                    </span>
                    <span class="material-icons-sharp">
                        dark_mode
                    </span>
                </div>

                <div class="profile">
                    <div class="info">
                        <p>Hey, <b><%= admin1.username %></b></p>
                        <small class="text-muted">Admin</small>
                    </div>
                    <div class="profile-photo">
                        <a href="/user"> <!-- Navigate back to user profile -->
                            <% if (admin1.profilePicture) { %>
                                <img src="<%= admin1.profilePicture.replace(/\\/g, '/') %>" alt="Profile Picture">
                            <% } else { %>
                                <!-- Placeholder image or default image when no profile picture exists -->
                                <img src="/images/profile-icon.jpg" width="40" class="rounded-circle">
                            <% } %>
                        </a>
                    </div>
                </div>
            </div>
            <!-- End of Nav -->

            <div class="user-profile">
                <div class="logo">
                    <img src="../images/logo.png">
                    <h2>BFP Batac-City</h2>
                    <p></p>
                </div>
            </div>
        </div>
    </div>
    <script src="../js/control.js"></script>
</body>
</html>