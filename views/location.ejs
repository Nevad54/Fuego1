<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Sharp" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    <link rel="stylesheet" href="/location.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
    <title>BFP- Batac- City</title>
    <style>

    </style>
</head>

<body>


    <div class="container">

        <!-- Sidebar Section -->
        <aside>
            <div class="toggle">
                <div class="logo">
                    <img src="../images/logo.png">
                    <h2>BFP <span class="danger">Batac-City</span></h2>
                </div>
                <div class="close" id="close-btn">
                    <span class="material-icons-sharp">
                        close
                    </span>
                </div>
            </div>

            <div class="sidebar">
                <a href="/adminHome">
                    <span class="material-icons-sharp">
                        dashboard
                    </span>
                    <h3>Dashboard</h3>
                </a>
              
              
                <a href="/charts">
                    <span class="material-icons-sharp">
                        insights
                    </span>
                    <h3>Charts</h3>
                </a>
                <a href="/alert">
                    <span class="material-symbols-outlined">
                        notifications
                        </span>
                    <h3>Alerts</h3>
                    
                </a>
                <a href="/database">
                    <span class="material-symbols-outlined">
                        database
                        </span>
                    <h3>Database</h3>
                    
                </a>
                           
                      <!--  <a href="/user">
                        <span class="material-symbols-outlined">
                            manage_accounts
                        </span>
                        <h3>User</h3>
                    </a>
                -->
                    
                <a href="/location" class="active">
                    <span class="material-icons-sharp">pin_drop</span>

                    <h3>Maps</h3>
                </a>
                <a href="/userList">
                    <span class="material-symbols-outlined"> admin_panel_settings </span>
                    <h3>Admin Panel</h3>
                </a>
                <a href="/AboutUs">
                    <span class="material-symbols-outlined">
                        help
                    </span>
                    <h3>About Us</h3>
                </a>
                
                <a href="/logout">
                    <span class="material-icons-sharp">
                        logout
                    </span>
                    <h3>Logout</h3>
                </a>
            </div>
        </aside>
        <!-- End of Sidebar Section -->

        <!-- Main Content -->
        <main>
            <div id="map"></div>
            <div id="searchContainer">
                <label for="searchInput">Search:</label>
                <input type="text" id="searchInput" placeholder="">
                <button onclick="searchIcon()">Search</button>
                <button onclick="stopDisplayingTooltips()">Clear</button>
                <!-- Add Back button -->
            </div>
           
            <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
            <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
            <script src="https://unpkg.com/esri-leaflet"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.1.0/mqtt.min.js"></script>
            <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    // Add event listener for clicks on the Leaflet Routing container
                    document.addEventListener('click', function(event) {
                        const routingContainer = document.querySelector('.leaflet-routing-container');
                        const searchContainer = document.getElementById('searchContainer');
                
                        // Check if the routing container exists before accessing its properties
                        if (routingContainer) {
                            // Debugging: Log the event target
                            console.log('Clicked Element:', event.target);
                
                            // Check if the clicked element or any of its ancestors is the Leaflet Routing container
                            if (event.target.closest('.leaflet-routing-container')) {
                                // Debugging: Log that the Leaflet Routing container is clicked
                                console.log('Leaflet Routing Container Clicked');
                
                                // Set higher z-index for routing container and lower z-index for search container
                                routingContainer.style.zIndex = '1002';
                                searchContainer.style.zIndex = '0';
                            } else {
                                // Reset z-index for both elements if the click is outside the routing container
                                routingContainer.style.zIndex = '';
                                searchContainer.style.zIndex = '';
                            }
                        }
                    });
                });
                

                  // Function to display error message
                  function displayErrorMessage(message) {
                    var errorMessageElement = document.getElementById("errorMessage");
                    errorMessageElement.innerText = message;
                    errorMessageElement.style.display = "block"; // Display the error message
                    setTimeout(function() {
                        errorMessageElement.style.display = "none"; // Hide the error message after 5 seconds
                    }, 5000);
                }

                // Function to display success message
                function displaySuccessMessage(message) {
                    var successMessageElement = document.getElementById("successMessage");
                    successMessageElement.innerText = message;
                    successMessageElement.style.display = "block"; // Display the success message
                    setTimeout(function() {
                        successMessageElement.style.display = "none"; // Hide the success message after 5 seconds
                    }, 5000);
                }

                var map = L.map('map').setView([18.059999, 120.543470], 14);
                map.zoomControl.setPosition('bottomright');

        var defaultTileLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        }).addTo(map);

        var alternativeTileLayer =  L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
	attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
	subdomains: 'abcd',
	maxZoom: 20
        });

       


        function switchTileLayer() {
            if (map.hasLayer(defaultTileLayer)) {
                map.removeLayer(defaultTileLayer);
                map.addLayer(alternativeTileLayer);
                document.getElementById('switchButton').innerHTML = 'Satellite View';
            } else {
                map.removeLayer(alternativeTileLayer);
                map.addLayer(defaultTileLayer);
                document.getElementById('switchButton').innerHTML = 'Map View';
            }
        }
        
        var switchTileLayerButton = L.Control.extend({
            options: {
                position: 'bottomleft'
            },
            onAdd: function () { 
                var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
        
                // Create a wrapper div with a high z-index
                var wrapper = L.DomUtil.create('div', 'switch-button-wrapper', container);
                wrapper.style.zIndex = '10000'; // Set a high z-index for the wrapper
        
                // Add the button inside the wrapper
                wrapper.innerHTML = '<button id="switchButton">Map View</button>';
        
                // Set the z-index of the button container
                container.style.zIndex = '10001'; // Set the z-index of the button container
        
                // Add click event listener to the button
                wrapper.querySelector('#switchButton').addEventListener('click', function(event) {
                    // Prevent default action
                    event.preventDefault();
                    // Stop event propagation to prevent the map from receiving the click event
                    event.stopPropagation();
                    // Call the switchTileLayer function
                    switchTileLayer();
                });
        
                return container;
            }
        });
        
        map.addControl(new switchTileLayerButton());
        
        var customSwitchButtonContainer = document.querySelector('.custom-switch-button-container');
if (customSwitchButtonContainer) {
    customSwitchButtonContainer.style.zIndex = '10000'; // Set the desired z-index value
}

        
            var fdasIcon = L.icon({
            iconUrl: '../images/fdas1.png', // Path to the FDAS System icon image
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            tooltipAnchor: [16, -28],
            shadowSize: [41, 41]
        });
        
        // Add FDAS System marker to the map
                var hydrantIcon = L.icon({
                    iconUrl: '../images/353902.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    tooltipAnchor: [16, -28],
                    shadowSize: [41, 41]
                });
        
 

                var customIcon3 = L.icon({
                    iconUrl: '../images/fdp.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    tooltipAnchor: [16, -28],
                    shadowSize: [41, 41]
                });
        
        
                var customIcon2 = L.icon({
                    iconUrl: '../images/alarm.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    tooltipAnchor: [16, -28],
                    shadowSize: [41, 41]
                }); 
        
                
                var currentRoute;
                function createCustomMarker() {
                    var title = document.getElementById('customTitleInput').value;
                    var latitude = parseFloat(document.getElementById('customLatitudeInput').value);
                    var longitude = parseFloat(document.getElementById('customLongitudeInput').value);
                    var markerType = document.getElementById('customMarkerType').value;
        
                    if (isNaN(latitude) || isNaN(longitude)) {
                        alert('Please enter valid coordinates.');
                        return;
                    }
        
                    var customIcon;
                    switch (markerType) {
                        case 'hydrants':
                            customIcon = hydrantIcon;
                            break;
                        case 'conventional':
                            customIcon = customIcon1;
                            break;
                        case 'extinguisher':
                            customIcon = extinguisherIcon;
                            break;
                        case 'sprinkler':
                            customIcon = customIcon2;
                            break;
                        case 'fdas':
                            customIcon = fdasIcon;
                            break;
                        default:
                            alert('Invalid marker type selected.');
                            return;
                    }
        
                    // Send data to the server for the selected custom marker type
                    sendDataToServer(markerType, { title, latitude, longitude }, function (data) {
                        // Add the new marker to the map
                        addMarkerWithCustomIcon(data.latitude, data.longitude, data.title, customIcon);
                    });
                }
                function addHydrantMarker(lat, lon, label) {
            var marker = L.marker([lat, lon], {
                icon: hydrantIcon,
                title: label
            })
            .addTo(map)
            .bindPopup(label)
            .openPopup();
        
            marker.on('click', function (e) {
                if (!startMarker) {
                    startMarker = e.target;
                    alert('Start marker set. Click on another marker to set the destination.');
                } else {
                    var endMarker = e.target;
                    createRoute(endMarker.getLatLng());
        
                    // Reset the startMarker for the next route
                    startMarker = null;
                }
            });
        }
        var defaultStartPoint = L.latLng(18.064449, 120.558718); // Set your default starting point
    var currentRoute = null;
        
        function createRoute(endLatLng) {
        if (currentRoute) {
            map.removeControl(currentRoute);
        }

        currentRoute = L.Routing.control({
            waypoints: [
                defaultStartPoint, // Use the default starting point as the origin
                L.latLng(endLatLng.lat, endLatLng.lng)
            ],
            routeWhileDragging: true,
            show: true,
            language: 'en',
            routeDragTimeout: 250
        }).addTo(map);
    }
        
                addMarkerWithCustomIcon(18.064449, 120.558718, 'BFP', customIcon3);   
            
        
        
        
                function fetchDataAndAddMarkers(endpoint, customIcon) {
            fetch(`https://fuego1.onrender.com/${endpoint}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(`Retrieved ${endpoint} Data:`, data);
        
                    if (Array.isArray(data)) {
                        const markers = data
                            .filter(item => item.latitude !== undefined && item.longitude !== undefined && item.title !== undefined)
                            .map(item => ({
                                latitude: parseFloat(item.latitude),
                                longitude: parseFloat(item.longitude),
                                title: item.title,
                            }));
        
                        markers.forEach(marker => {
                            console.log('Marker Data:', marker);
                            addMarkerWithCustomIcon(marker.latitude, marker.longitude, marker.title, customIcon);
                        });
                    } else {
                        console.error(`Error: Data from server for ${endpoint} is not an array:`, data);
                    }
                })
                .catch(error => {
                    handleFetchError(error, `Successful to load ${endpoint} from the database.`);
                });
        }
        
        function handleFetchError(error, message) {
            console.error('Error:', error);
            alert(message);
        }
        
    
 
        fetchDataAndAddMarkers('hydrants', hydrantIcon);
        fetchDataAndAddMarkers('fdas', fdasIcon);
        
        
        
        function createCustomConventional() {
            var title = document.getElementById('customTitleInput').value;
            var latitude = parseFloat(document.getElementById('customLatitudeInput').value);
            var longitude = parseFloat(document.getElementById('customLongitudeInput').value);
        
            if (isNaN(latitude) || isNaN(longitude)) {
                alert('Please enter valid coordinates.');
                return;
            }
        
            // Send data to the server for custom conventional hydrant
            sendDataToServer('conventional', { title, latitude, longitude }, function(data) {
                // Add the new marker to the map
            });
        }
        function createCustomExtinguisher() {
            var title = document.getElementById('customTitleInput').value;
            var latitude = parseFloat(document.getElementById('customLatitudeInput').value);
            var longitude = parseFloat(document.getElementById('customLongitudeInput').value);
        
            if (isNaN(latitude) || isNaN(longitude)) {
                alert('Please enter valid coordinates.');
                return;
            }
        
            sendDataToServer('extinguisher', { title, latitude, longitude });
        }
        
        function sendDataToServer(endpoint, data, callback) {
            fetch(`https://fuego1.onrender.com/${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })
            .then(response => response.json())
            .then(responseData => {
                if (responseData.success) {
                    callback(responseData.data);
        
                    // Remove the alert for successful insert
                    // alert(responseData.message);
                } else {
                    // Remove the alert for failed insert
                    // alert(responseData.error);
                }
            })
            .catch(error => {
                // Handle the fetch error without showing an alert
                handleFetchError(error, `Successfully to sent data to ${endpoint}`);
            });
        }
        
        
        function createCustomfdas() {
            var title = document.getElementById('customTitleInput').value;
            var latitude = parseFloat(document.getElementById('customLatitudeInput').value);
            var longitude = parseFloat(document.getElementById('customLongitudeInput').value);
        
            if (isNaN(latitude) || isNaN(longitude)) {
                alert('Please enter valid coordinates.');
                return;
            }
        
            sendDataToServer('fdas', { title, latitude, longitude }, function(data) {
                // Add the new marker to the map with the correct icon (fdasIcon)
                addMarkerWithCustomIcon(data.latitude, data.longitude, data.title, fdasIcon);
            });
        }
        
        
                function createCustomSprinkler() {
                    var title = document.getElementById('customTitleInput').value;
                    var latitude = parseFloat(document.getElementById('customLatitudeInput').value);
                    var longitude = parseFloat(document.getElementById('customLongitudeInput').value);
        
                    if (isNaN(latitude) || isNaN(longitude)) {
                        alert('Please enter valid coordinates.');
                        return;
                    }
                    sendDataToServer('sprinkler', { title, latitude, longitude }, function(data) {
                // Add the new marker to the map
            });
        }
        
                function createCustomHydrant() {
            var title = document.getElementById('customTitleInput').value;
            var latitude = parseFloat(document.getElementById('customLatitudeInput').value);
            var longitude = parseFloat(document.getElementById('customLongitudeInput').value);
        
            if (isNaN(latitude) || isNaN(longitude)) {
                alert('Please enter valid coordinates.');
                return;
            }
        
            sendDataToServer('hydrants', { title, latitude, longitude }, function(data) {
                // Add the new marker to the map
                addMarkerWithCustomIcon(data.latitude, data.longitude, data.title, hydrantIcon);
            });
        }
        
                
        function addMarkerWithCustomIcon(lat, lon, label, customIcon) {
    var marker = L.marker([lat, lon], { icon: customIcon, title: label }).addTo(map)
        .bindPopup(label);

    // Add a click event to each marker
    marker.on('click', function (e) {
        createRoute(e.latlng);

        // Fetch and display nearby hydrants
        fetchNearbyHydrants(e.latlng);
    });
}

// Add a click event to the map
map.on('click', function (e) {
    createRoute(e.latlng);

    // Fetch and display nearby hydrants
    fetchNearbyHydrants(e.latlng);
});

    function fetchNearbyHydrants(location) {
    // Define a radius to consider nearby hydrants (adjust as needed)
    var radius = 500; // Adjust the radius as needed

    // Fetch nearby hydrants within the specified radius
    fetch('https://fuego1.onrender.com/hydrants')
        .then(response => response.json())
        .then(data => {
            if (Array.isArray(data)) {
                // Filter hydrants that are within the specified radius
                var nearbyHydrants = data.filter(hydrant => {
                    var hydrantLocation = L.latLng(parseFloat(hydrant.latitude), parseFloat(hydrant.longitude));
                    return location.distanceTo(hydrantLocation) <= radius;
                });

                // Hide all hydrants on the map
                map.eachLayer(function (layer) {
                    if (layer instanceof L.Marker && layer.options.icon === hydrantIcon) {
                        map.removeLayer(layer);
                    }
                });

                // Display only nearby hydrants
                nearbyHydrants.forEach(hydrant => {
                    addMarkerWithCustomIcon(hydrant.latitude, hydrant.longitude, hydrant.title, hydrantIcon);
                });
            } else {
                console.error('Error: Data from server for hydrants is not an array:', data);
            }
        })
        .catch(error => {
            handleFetchError(error, 'Failed to fetch nearby hydrants.');
        });
}           
    var tooltipLayerGroup = L.layerGroup().addTo(map);
        
    function searchIcon() {
        var searchTerm = document.getElementById('searchInput').value.toLowerCase(); // Get the search term from the input element and convert it to lowercase
        var latLngPattern = /(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)/; // Regular expression pattern to match latitude and longitude
    
        // Check if the search term matches the pattern for latitude and longitude
        if (searchTerm.match(latLngPattern)) {
            var match = searchTerm.match(latLngPattern); // Extract latitude and longitude from the search term
            var latitude = parseFloat(match[1]); // Latitude extracted from the search term
            var longitude = parseFloat(match[3]); // Longitude extracted from the search term
    
            // Fly to the specified latitude and longitude on the map
            map.flyTo([latitude, longitude], 14);
    
            // Clear existing tooltips from the map
        
    
            // Fetch the name of the location based on the coordinates
            fetchLocationName(latitude, longitude)
                .then(locationName => {
                    // Create a location icon
                    var locationIcon = L.icon({
                        iconUrl: '/images/icons8-location-48.png', // Replace 'path_to_your_location_icon.png' with the actual path to your location icon
                        iconSize: [29, 38],
                        iconAnchor: [12, 41],
                        popupAnchor: [1, -34],
                        tooltipAnchor: [16, -28],
                        shadowSize: [41, 41]
                    });
    
                    // Add a marker with the location name as a popup at the specified latitude and longitude
                    L.marker([latitude, longitude], { icon: locationIcon }).addTo(map).bindPopup(locationName).openPopup();
                })
                .catch(error => {
                    console.error('Error fetching location name:', error);
                    displayErrorMessage('Failed to fetch location name.');
                });
        } else {
            // Search for matching markers based on the search term
            var matchingMarkers = [];
    
            // Remove existing tooltips from the map
     
    
            map.eachLayer(function (layer) {
                if (layer instanceof L.Marker && layer.options.title) {
                    var title = layer.options.title.toLowerCase(); // Convert marker title to lowercase for case-insensitive comparison
                    if (title.includes(searchTerm)) {
                        matchingMarkers.push(layer); // Add matching markers to the array
                    }
                }
            });
    
            if (matchingMarkers.length > 0) {
                var popupContent = "";
                matchingMarkers.forEach(marker => {
                    var iconHtml = `<img src="${marker.options.icon.options.iconUrl}" alt="icon" style="width: 20px; height: 20px; margin-right: 5px;">`;
                    var content = `<div>${iconHtml} ${marker.options.title}</div>`;
                    marker.bindTooltip(content, { direction: 'top', permanent: true }).addTo(tooltipLayerGroup);
                });
    
                map.flyTo(matchingMarkers[0].getLatLng(), 14); // Fly to the first matching marker's location
            } else {
                displayErrorMessage("No matching markers found."); // Display error message if no matching markers are found
            }
        }
    }
    
    
    // Function to fetch the name of the location based on latitude and longitude
    function fetchLocationName(latitude, longitude) {
        return new Promise((resolve, reject) => {
            // Use a geocoding service API to fetch the location name
            // Replace the placeholder URL with the actual URL of the geocoding service API
            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=18&addressdetails=1`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Extract the location name from the API response
                    const locationName = data.display_name;
                    resolve(locationName);
                })
                .catch(error => {
                    reject(error);
                });
        });
    }
    
    var searchTerm = document.getElementById('searchInput').value.toLowerCase(); // Get the search term from the input element and convert it to lowercase
    var latLngPattern = /(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)/; // Regular expression pattern to match latitude and longitude

    // Check if the search term matches the pattern for latitude and longitude
    if (searchTerm.match(latLngPattern)) {
        var match = searchTerm.match(latLngPattern); // Extract latitude and longitude from the search term
        var latitude = parseFloat(match[1]); // Latitude extracted from the search term
        var longitude = parseFloat(match[3]); // Longitude extracted from the search term

        // Fly to the specified latitude and longitude on the map
        map.flyTo([latitude, longitude], 14);

        // Clear existing tooltips from the map
        tooltipLayerGroup.clearLayers();

        // Create a location icon
        var locationIcon = L.icon({
            iconUrl: '/images/icons8-location-48.png', // Replace 'path_to_your_location_icon.png' with the actual path to your location icon
            iconSize: [29, 38],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            tooltipAnchor: [16, -28],
            shadowSize: [41, 41]
        });

        // Add a marker with the location icon at the specified latitude and longitude
        L.marker([latitude, longitude], { icon: locationIcon }).addTo(map).bindPopup("Searched Location").openPopup();
    } else {
        // Search for matching markers based on the search term
        var matchingMarkers = [];

        // Remove existing tooltips from the map
        tooltipLayerGroup.clearLayers();

        map.eachLayer(function (layer) {
            if (layer instanceof L.Marker && layer.options.title) {
                var title = layer.options.title.toLowerCase(); // Convert marker title to lowercase for case-insensitive comparison
                if (title.includes(searchTerm)) {
                    matchingMarkers.push(layer); // Add matching markers to the array
                }
            }
        });

        if (matchingMarkers.length > 0) {
            var popupContent = "";
            matchingMarkers.forEach(marker => {
                var iconHtml = `<img src="${marker.options.icon.options.iconUrl}" alt="icon" style="width: 20px; height: 20px; margin-right: 5px;">`;
                var content = `<div>${iconHtml} ${marker.options.title}</div>`;
                marker.bindTooltip(content, { direction: 'top', permanent: true }).addTo(tooltipLayerGroup);
            });

            map.flyTo(matchingMarkers[0].getLatLng(), 14); // Fly to the first matching marker's location
        } else {
            displayErrorMessage("No matching markers found."); // Display error message if no matching markers are found
        }
    }


                function toggleCustomHydrantContainer() {
                    var customHydrantContainer = document.getElementById('customHydrantContainer');
                    customHydrantContainer.style.display = (customHydrantContainer.style.display === 'none') ? 'block' : 'none';
                }
        
                function stopDisplayingTooltips() {
                    map.eachLayer(function (layer) {
                        if (layer instanceof L.Marker) {
                            layer.unbindTooltip();
                        }
                    });
                }
                const socket = io.connect('https://fuego1.onrender.com');

socket.on('connect', () => {
    console.log('Connected to Socket.IO');
});

// Assuming each marker has a name attribute
socket.on('mqttMessage', (payload) => {
    console.log('Received mqttMessage:', payload);

    if (payload.topic === 'Fire') {
        // Display pop-up message on the marker with the name "COE"
        displayPopUpOnCOEMarker(payload.message);
    }
});

function displayPopUpOnCOEMarker(message) {
    map.eachLayer(function (layer) {
        // Check if the layer is a marker with the name "COE"
        if (layer instanceof L.Marker && layer.options.name === 'COE') {
            // Create a pop-up with the received message
            layer.bindPopup(message).openPopup();
        }
    });
}






        
            </script>

        </main>
        <!-- End of Main Content -->

        <!-- Right Section -->


        <div class="right-section">
            <div class="nav">
                <button id="menu-btn">
                    <span class="material-icons-sharp">
                        menu
                    </span>
                </button>
                <div class="dark-mode">
                    <span class="material-icons-sharp active">
                        light_mode
                    </span>
                    <span class="material-icons-sharp">
                        dark_mode
                    </span>
                </div>

                <div class="profile">
                    <div class="profile-photo">
                        <a href="/user"> <!-- Navigate back to user profile -->
                            <% if (admin1.profilePicture) { %>
                                <img src="<%= admin1.profilePicture.replace(/\\/g, '/') %>" alt="Profile Picture">
                            <% } else { %>
                                <!-- Placeholder image or default image when no profile picture exists -->
                                <img src="/images/profile-icon.jpg" width="40" class="rounded-circle">
                            <% } %>
                        </a>
                    </div>
                </div>

            
            </div>
            <!-- End of Nav -->

            
            <button id="addHydrantButton" onclick="toggleCustomHydrantContainer()">Add</button>
            <div id="customHydrantContainer">
                <label for="customTitleInput">Title:</label>
                <input type="text" id="customTitleInput" placeholder="Enter title">
                <label for="customLatitudeInput">Latitude:</label>
                <input type="text" id="customLatitudeInput" placeholder="Enter latitude">
                <label for="customLongitudeInput">Longitude:</label>
                <input type="text" id="customLongitudeInput" placeholder="Enter longitude">
            
                <!-- New dropdown/select element for choosing marker type -->
                <label for="customMarkerType">Marker Type:</label>
                <select id="customMarkerType">
                    <option value="hydrants">Hydrant</option>
                    <option value="conventional">Conventional</option>
                    <option value="extinguisher">Extinguisher</option>
                    <option value="sprinkler">Sprinkler</option>
                    <option value="fdas">FDAS</option>
                </select>
        
                <button onclick="createCustomMarker()">Create Custom Marker</button>
            </div>


            
        </div>


    </div>
    <script src="../js/control.js"></script>
</body>

</html>